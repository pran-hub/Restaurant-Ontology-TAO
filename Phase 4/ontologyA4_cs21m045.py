# -*- coding: utf-8 -*-
"""ontologyA4_CS21M045.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15a7YHXURUy8kIuV4IbK8rAy0eprMCrfF
"""

!pip install rdflib

!pip install owlready2

import os
from rdflib import Graph,Literal, RDF, URIRef
from rdflib.namespace import FOAF, XSD
from rdflib.namespace import  RDF, RDFS

cwd=os.getcwd()

"""### Fetch data from XML"""

import xml.etree.ElementTree as ET

tree = ET.parse('myxml.xml')
root = tree.getroot()

waiters = []
AllWaiters = root.findall("Branch/Staff/Waiter")
for w in AllWaiters:
    wId = w.get('Id')
    name = w.find('Name')
    salary = w.find('Salary')
    contact = w.find('Contact')
    phn = contact[0]
    email = contact[1]
    waiters.append([wId,name.text,salary.text,phn.text,email.text])

orders = []
Allorders = root.findall("Branch/Customer/Order")
for w in Allorders:
    #waiters.append(w)
    oId = w.get('OrderNo')
    Date = w.find('Date')
    details = "Date = "+Date[0].text+" "+Date[1].text+" "+Date[2].text+" | "
    amount = w.find('Amount')
    details = details+"Amount = "+amount.text+" | Items ="
    items = w.findall('OrderItem')
    ordItems = set()
    for item in items:
      it = item.get('itemId')
      ordItems.add(it)
      details = details + ' '+it
    wait = w.find('ServedBy')
    servBy = wait.get('waiterId')
    orders.append([oId,servBy,details,ordItems])

# print(*waiters, sep = "\n")

# print(*orders, sep = "\n")

Foods = {}
Beverages = {}
AllStarter = root.findall("Branch/MenuCard/Starter/Item")
AllMainCourse = root.findall("Branch/MenuCard/MainCourse/Item")
AllDessert = root.findall("Branch/MenuCard/Dessert/Item")  
for w in AllStarter:
  id=w.get('Id')
  if(w[0].tag == "Food"):
    Foods[id]=w[0].text
  elif(w[0].tag == "Beverage"):
    Beverages[id]=w[0].text
for w in AllMainCourse:
  id=w.get('Id')
  if(w[0].tag == "Food"):
    Foods[id]=w[0].text
  elif(w[0].tag == "Beverage"):
    Beverages[id]=w[0].text
for w in AllDessert:
  id=w.get('Id')
  if(w[0].tag == "Food"):
    Foods[id]=w[0].text
  elif(w[0].tag == "Beverage"):
    Beverages[id]=w[0].text

# f = Foods.values()
# for i in f:
#   print(f'{i} {type(i)}')

# f = Beverages.values()
# for i in f:
#   print(f'{i} {type(i)}')

g=Graph()
filename = cwd+"/RestaurantOntologyRdf.owl"
g.load(filename, format='xml')

def isAlreadyDefined(subs):
    for s in g.subjects():
        if(subs in str(s)):
            return True
    return False

myNamespace="http://www.semanticweb.org/ajay/ontologies/2022/3/RestaurantOnto"
namedIndividual = URIRef('http://www.w3.org/2002/07/owl#NamedIndividual')
rdftype = URIRef("http://www.w3.org/1999/02/22-rdf-syntax-ns#type")

triplets=[]
obj_properties=[]  
att_properties=[]  

arc_class=str(myNamespace)+"#Waiter"
for indv in waiters:
  individualName=str(myNamespace)+"#"+str(indv[1]).replace(' ','_')
  arc_individual = URIRef(individualName)
  if(isAlreadyDefined(individualName)==False): 
    triplets.append((arc_individual,RDF.type, URIRef(arc_class)))
    triplets.append((arc_individual,RDF.type, URIRef(namedIndividual)))

    subject=arc_individual
    #pred= URIRef(str(myNamespace)+"#id")
    literal=indv[0]
    att_properties.append( (subject, URIRef(str(myNamespace)+"#id")  , Literal(literal,datatype=XSD.string)) )
    att_properties.append( (subject, URIRef(str(myNamespace)+"#name"), Literal(indv[1],datatype=XSD.string)) )
    att_properties.append( (subject, URIRef(str(myNamespace)+"#salary"), Literal(indv[2],datatype=XSD.string)) )
    

arc_class=str(myNamespace)+"#Order"
for indv in orders:
  individualName=str(myNamespace)+"#"+str(indv[0])
  arc_individual = URIRef(individualName)
  if(isAlreadyDefined(individualName)==False): 
    triplets.append((arc_individual,RDF.type, URIRef(arc_class)))
    triplets.append((arc_individual,RDF.type, URIRef(namedIndividual)))

    subject=arc_individual
    att_properties.append( (subject, URIRef(str(myNamespace)+"#orderDetails"), Literal(indv[2],datatype=XSD.string)) )

arc_class=str(myNamespace)+"#Food"
foodList = Foods.values()
for indv in foodList:
  individualName=str(myNamespace)+"#"+str(indv).replace(' ','_')
  # print(individualName)
  arc_individual = URIRef(individualName)
  if(isAlreadyDefined(individualName)==False): 
    triplets.append((arc_individual,RDF.type, URIRef(arc_class)))
    triplets.append((arc_individual,RDF.type, URIRef(namedIndividual)))

arc_class=str(myNamespace)+"#Beverage"
BeverageList = Beverages.values()
for indv in BeverageList:
  individualName=str(myNamespace)+"#"+str(indv).replace(' ','_')
  # print(individualName)
  arc_individual = URIRef(individualName)
  if(isAlreadyDefined(individualName)==False): 
    triplets.append((arc_individual,RDF.type, URIRef(arc_class)))
    triplets.append((arc_individual,RDF.type, URIRef(namedIndividual)))

# print(att_properties[2])

# print(att_properties[51])

"""### Add object properties "takes"
#### Waiter takes orders
#### Use attribute waiterId ServedBy provided in the XML to make the mapping
"""

for waiter in waiters:
    individualName=str(myNamespace)+"#"+str(waiter[1]).replace(' ','_')  
    sub = URIRef(individualName)         
    pred=URIRef((myNamespace)+"#takes")

    for ord in orders: 
        if(ord[1]==waiter[0]):
            individualName=str(myNamespace)+"#"+str(ord[0]).replace(' ','_') 
            obj = URIRef(individualName)
            obj_properties.append((sub,pred,obj))

"""### Add object properties "contains"
#### Order contains Food
#### Use attribute waiterId ServedBy provided in the XML to make the mapping
"""

for order in orders:
  individualName=str(myNamespace)+"#"+str(order[0]).replace(' ','_')
  sub = URIRef(individualName)         
  pred=URIRef((myNamespace)+"#contains")

  # print(order[3])
  for item in order[3]:
    if (Foods.get(item)!=None):
      nn = Foods.get(item)
      individualName=str(myNamespace)+"#"+str(nn).replace(' ','_')
      obj = URIRef(individualName)
      obj_properties.append((sub,pred,obj))
    elif(Beverages.get(item)!=None):
      nn = Beverages.get(item)
      individualName=str(myNamespace)+"#"+str(nn).replace(' ','_')
      obj = URIRef(individualName)
      obj_properties.append((sub,pred,obj))

# print(*obj_properties, sep = "\n")

"""###Print triplets"""

for triplet in triplets:
  print(triplet)

for o in obj_properties:
  print(o)

for a in att_properties:
  print(a)

print("Total Added Triples = ",int(len(triplets))+int(len(obj_properties))+int(len(att_properties)))
print(int(len(triplets)))
print(int(len(obj_properties)))
print(int(len(att_properties)))

"""###Add tiplets"""

for i in triplets:
    g.add(i)

for i in obj_properties:
    g.add(i)

for i in att_properties:
    g.add(i)

count= 0
for s,p,o in g:
  count +=1
print(count)

g.serialize(destination="draft1.owl",format='xml')

from owlready2 import *

onto_path.append(cwd)
onto = get_ontology("file://draft1.owl").load()

print(type(onto))

with onto: sync_reasoner()
onto.save("RestaurantOntologyRdf_syn.owl")

import rdflib
g2=rdflib.Graph()
fl = "RestaurantOntologyRdf_syn.owl"
g2.load(fl, format='xml')

c=0
for t in g2.triples((None,None,None)):
  c+=1
print(c)

from rdflib.compare import to_isomorphic, graph_diff
iso1 = to_isomorphic(g)
iso2 = to_isomorphic(g2)

in_both, in_first, in_second = graph_diff(iso1,iso2)

def dump_nt_sorted(g):
    for l in sorted(g.serialize(format='nt').splitlines()):
        if(l) : print(l)

dump_nt_sorted(in_second)